1)

import java.util.Arrays;
import java.util.Scanner;

public class OrdenamientoParametros {

    public static void main(String[] args) {
        if (args.length >= 4) {
            int[] numeros = new int[3];
            for (int i = 0; i < 3; i++) {
                numeros[i] = Integer.parseInt(args[i]);
            }
            char orden = args[3].charAt(0);
            if (orden == 'a') {
                Arrays.sort(numeros);
            } else if (orden == 'd') {
                Arrays.sort(numeros);
                reverse(numeros);
            } else {
                System.out.println("La letra de ordenamiento debe ser 'a' o 'd'");
                return;
            }
            System.out.println(Arrays.toString(numeros));
        } else {
            Scanner sc = new Scanner(System.in);
            int[] numeros = new int[3];
            for (int i = 0; i < 3; i++) {
                System.out.print("Ingrese el " + (i+1) + "° número: ");
                numeros[i] = sc.nextInt();
            }
            System.out.print("Ingrese la letra de ordenamiento (a para ascendente, d para descendente): ");
            char orden = sc.next().charAt(0);
            if (orden == 'a') {
                Arrays.sort(numeros);
            } else if (orden == 'd') {
                Arrays.sort(numeros);
                reverse(numeros);
            } else {
                System.out.println("La letra de ordenamiento debe ser 'a' o 'd'");
                return;
            }
            System.out.println(Arrays.toString(numeros));
        }
    }

    public static void reverse(int[] array) {
        for (int i = 0; i < array.length / 2; i++) {
            int temp = array[i];
            array[i] = array[array.length - 1 - i];
            array[array.length - 1 - i] = temp;
        }
    }

}



2)

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class SumOrMultiplyNumbers {
    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Debe ingresar la ruta del archivo y la operación a realizar (suma o multiplicación)");
            return;
        }
        String filePath = args[0];
        String operation = args[1];
        int result = 0;
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                int num = Integer.parseInt(line.trim());
                if (operation.equals("suma")) {
                    result += num;
                } else if (operation.equals("multiplicación")) {
                    result *= num;
                } else {
                    System.out.println("Operación no válida. Debe ser suma o multiplicación");
                    return;
                }
            }
        } catch (IOException | NumberFormatException e) {
            System.out.println("Error al leer el archivo o al procesar los números");
            e.printStackTrace();
            return;
        }
        System.out.println("El resultado es: " + result);
    }
}


Para ejecutar el programa, debes abrir una terminal en la carpeta donde está el archivo compilado (.class) y escribir algo como esto:

java SumOrMultiplyNumbers /ruta/al/archivo suma

o

java SumOrMultiplyNumbers /ruta/al/archivo multiplicación




3)

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class CodificadorDecoder {

    public static void main(String[] args) {
        String modo = args[0]; // Codificación o decodificación
        int desplazo = Integer.parseInt(args[1]); // Valor de desplazo
        String archivoEntrada = args[2]; // Archivo de entrada
        String archivoSalida = args[3]; // Archivo de salida

        try {
            File entrada = new File(archivoEntrada);
            Scanner scanner = new Scanner(entrada);
            FileWriter salida = new FileWriter(archivoSalida);
            while (scanner.hasNextLine()) {
                String linea = scanner.nextLine();
                String resultado = "";
                for (int i = 0; i < linea.length(); i++) {
                    char caracter = linea.charAt(i);
                    if (Character.isLetter(caracter)) {
                        if (modo.equals("codificacion")) {
                            resultado += codificar(caracter, desplazo);
                        } else {
                            resultado += decodificar(caracter, desplazo);
                        }
                    } else {
                        resultado += caracter;
                    }
                }
                salida.write(resultado + "\n");
            }
            scanner.close();
            salida.close();
            System.out.println("El proceso ha finalizado correctamente.");
        } catch (FileNotFoundException e) {
            System.out.println("Archivo de entrada no encontrado.");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Ha ocurrido un error al escribir el archivo de salida.");
            e.printStackTrace();
        }
    }

    public static char codificar(char caracter, int desplazo) {
        int ascii = (int) caracter;
        int codificado = ascii + desplazo;
        if (Character.isUpperCase(caracter)) {
            if (codificado > 90) {
                codificado = 64 + (codificado - 90);
            }
        } else {
            if (codificado > 122) {
                codificado = 96 + (codificado - 122);
            }
        }
        return (char) codificado;
    }

    public static char decodificar(char caracter, int desplazo) {
        int ascii = (int) caracter;
        int decodificado = ascii - desplazo;
        if (Character.isUpperCase(caracter)) {
            if (decodificado < 65) {
                decodificado = 91 - (65 - decodificado);
            }
        } else {
            if (decodificado < 97) {
                decodificado = 123 - (97 - decodificado);
            }
        }
        return (char) decodificado;
    }
}

